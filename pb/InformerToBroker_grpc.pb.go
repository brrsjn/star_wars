// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InformerToBrokerClient is the client API for InformerToBroker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InformerToBrokerClient interface {
	AddCityToBroker(ctx context.Context, in *CityNumber, opts ...grpc.CallOption) (*Servidor, error)
	UpdateNameToBroker(ctx context.Context, in *CityName, opts ...grpc.CallOption) (*Servidor, error)
	UpdateNumber(ctx context.Context, in *CityNumber, opts ...grpc.CallOption) (*Servidor, error)
	DeleteCity(ctx context.Context, in *CityDelete, opts ...grpc.CallOption) (*Servidor, error)
	ConnectToServer(ctx context.Context, in *Instruct, opts ...grpc.CallOption) (*Servidor, error)
}

type informerToBrokerClient struct {
	cc grpc.ClientConnInterface
}

func NewInformerToBrokerClient(cc grpc.ClientConnInterface) InformerToBrokerClient {
	return &informerToBrokerClient{cc}
}

func (c *informerToBrokerClient) AddCityToBroker(ctx context.Context, in *CityNumber, opts ...grpc.CallOption) (*Servidor, error) {
	out := new(Servidor)
	err := c.cc.Invoke(ctx, "/InformerToBroker/AddCityToBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informerToBrokerClient) UpdateNameToBroker(ctx context.Context, in *CityName, opts ...grpc.CallOption) (*Servidor, error) {
	out := new(Servidor)
	err := c.cc.Invoke(ctx, "/InformerToBroker/UpdateNameToBroker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informerToBrokerClient) UpdateNumber(ctx context.Context, in *CityNumber, opts ...grpc.CallOption) (*Servidor, error) {
	out := new(Servidor)
	err := c.cc.Invoke(ctx, "/InformerToBroker/UpdateNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informerToBrokerClient) DeleteCity(ctx context.Context, in *CityDelete, opts ...grpc.CallOption) (*Servidor, error) {
	out := new(Servidor)
	err := c.cc.Invoke(ctx, "/InformerToBroker/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *informerToBrokerClient) ConnectToServer(ctx context.Context, in *Instruct, opts ...grpc.CallOption) (*Servidor, error) {
	out := new(Servidor)
	err := c.cc.Invoke(ctx, "/InformerToBroker/ConnectToServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InformerToBrokerServer is the server API for InformerToBroker service.
// All implementations must embed UnimplementedInformerToBrokerServer
// for forward compatibility
type InformerToBrokerServer interface {
	AddCityToBroker(context.Context, *CityNumber) (*Servidor, error)
	UpdateNameToBroker(context.Context, *CityName) (*Servidor, error)
	UpdateNumber(context.Context, *CityNumber) (*Servidor, error)
	DeleteCity(context.Context, *CityDelete) (*Servidor, error)
	ConnectToServer(context.Context, *Instruct) (*Servidor, error)
	mustEmbedUnimplementedInformerToBrokerServer()
}

// UnimplementedInformerToBrokerServer must be embedded to have forward compatible implementations.
type UnimplementedInformerToBrokerServer struct {
}

func (UnimplementedInformerToBrokerServer) AddCityToBroker(context.Context, *CityNumber) (*Servidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCityToBroker not implemented")
}
func (UnimplementedInformerToBrokerServer) UpdateNameToBroker(context.Context, *CityName) (*Servidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNameToBroker not implemented")
}
func (UnimplementedInformerToBrokerServer) UpdateNumber(context.Context, *CityNumber) (*Servidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNumber not implemented")
}
func (UnimplementedInformerToBrokerServer) DeleteCity(context.Context, *CityDelete) (*Servidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedInformerToBrokerServer) ConnectToServer(context.Context, *Instruct) (*Servidor, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectToServer not implemented")
}
func (UnimplementedInformerToBrokerServer) mustEmbedUnimplementedInformerToBrokerServer() {}

// UnsafeInformerToBrokerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InformerToBrokerServer will
// result in compilation errors.
type UnsafeInformerToBrokerServer interface {
	mustEmbedUnimplementedInformerToBrokerServer()
}

func RegisterInformerToBrokerServer(s grpc.ServiceRegistrar, srv InformerToBrokerServer) {
	s.RegisterService(&InformerToBroker_ServiceDesc, srv)
}

func _InformerToBroker_AddCityToBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerToBrokerServer).AddCityToBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InformerToBroker/AddCityToBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerToBrokerServer).AddCityToBroker(ctx, req.(*CityNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformerToBroker_UpdateNameToBroker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerToBrokerServer).UpdateNameToBroker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InformerToBroker/UpdateNameToBroker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerToBrokerServer).UpdateNameToBroker(ctx, req.(*CityName))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformerToBroker_UpdateNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerToBrokerServer).UpdateNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InformerToBroker/UpdateNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerToBrokerServer).UpdateNumber(ctx, req.(*CityNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformerToBroker_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CityDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerToBrokerServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InformerToBroker/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerToBrokerServer).DeleteCity(ctx, req.(*CityDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _InformerToBroker_ConnectToServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Instruct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InformerToBrokerServer).ConnectToServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InformerToBroker/ConnectToServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InformerToBrokerServer).ConnectToServer(ctx, req.(*Instruct))
	}
	return interceptor(ctx, in, info, handler)
}

// InformerToBroker_ServiceDesc is the grpc.ServiceDesc for InformerToBroker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InformerToBroker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InformerToBroker",
	HandlerType: (*InformerToBrokerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCityToBroker",
			Handler:    _InformerToBroker_AddCityToBroker_Handler,
		},
		{
			MethodName: "UpdateNameToBroker",
			Handler:    _InformerToBroker_UpdateNameToBroker_Handler,
		},
		{
			MethodName: "UpdateNumber",
			Handler:    _InformerToBroker_UpdateNumber_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _InformerToBroker_DeleteCity_Handler,
		},
		{
			MethodName: "ConnectToServer",
			Handler:    _InformerToBroker_ConnectToServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/InformerToBroker.proto",
}
